#!/usr/bin/env python

import json
import sys
from copy import copy
import os
import httplib
from urlparse import urlparse
from cStringIO import StringIO
from urllib import urlopen
try:
    import yaml
except ImportError:
    pass

def addFiles(arg, dirname, names):
    for name in names:
        path = os.path.join( dirname, name )
        if not os.path.samefile( path, arg[0] ):
            if not os.path.isdir(path):
                arg[1].append( os.path.normpath(path) )

def putData( url, data ):
    u = urlparse( url )
    curConn = httplib.HTTPConnection(u.netloc)
    curServer = u.netloc
    curConn.request("PUT", u.path, data, {})
    outStr = StringIO( curConn.getresponse().read() )
    curConn.close()
    return outStr


def parseRemus(server, pipelineName, path):
    baseDir = os.path.dirname( path )
    handle = open( path )
    
    if path.endswith(".yaml"):
        pipelineData = yaml.load( handle.read() )        
    else:
        pipelineData = json.loads( handle.read() )

    url = server + "/@pipeline/" + pipelineName 
    data = json.dumps( {} )
    print url
    print "pipeline:", data
    print putData( url, data ).read()

    initData = {}
    initApplet = {}
    for name in pipelineData:
        node = pipelineData[ name ]
        if node[ '_mode' ] in [ "split", "map", "reduce", "merge", "match", "pipe", "store", "agent", "remap" ]:
            fileList = []
            if node.has_key( "_code" ):
                if os.path.exists(  node[ "_code" ] ):
                    fileList.append( node[ "_code" ] )                
            
            if node.has_key('_include'):
                for f in node['_include']:
                    fileList.append(f)
            
            if node.has_key( "_init" ):                    
                if not initData.has_key( node[ "_init" ][ "_submitKey" ] ):
                    initData[ node[ "_init" ][ "_submitKey" ] ] = {}
                    initApplet[ node[ "_init" ][ "_submitKey" ] ] = []
                
                if "_data" in node[ "_init" ]:
                    initData[ node[ "_init" ][ "_submitKey" ] ][ name ] = json.dumps( node[ "_init" ].get("_data") )
                else:
                    initData[ node[ "_init" ][ "_submitKey" ] ][ name ] = None

                initApplet[node[ "_init" ][ "_submitKey" ]].append(name)
                del node[ "_init" ]

            url = server + "/" + pipelineName + "/@pipeline/" + name                  
            data = json.dumps( node )
            print "CREATE APPLET", url, data
            print putData( url, data ).read()

            for file in fileList:
                srcPath = os.path.join( baseDir, file ) 
                url = server + "/" + pipelineName + "/@attach/" + name + "/" + file.replace('/', '%2F')
                print "LOADING", url
                handle = open( srcPath )
                print putData( url, handle.read() ).read()
                handle.close()

    for subKey in initData:
        submitData = { "_submitInit" : initApplet[subKey] }
        url = "%s/%s/@submit/%s" % (server, pipelineName, subKey)
        print "INIT: ", url, json.dumps(submitData)        
        print urlopen( url, json.dumps(submitData) ).read()
        for applet in initData[ subKey ]:
            url = "%s/%s/%s/%s" % ( server, pipelineName, subKey, applet )
            data = initData[ subKey ][ applet ] 
            if data is not None:
                print "INIT DATA:", url, data
                print putData( url, data ).read()

    
if __name__ == "__main__":
    parseRemus( sys.argv[1], sys.argv[2], sys.argv[3] )
        
