#!/usr/bin/env python

import json
import sys
from copy import copy
from xml.dom.minidom import parseString
import os
import httplib
from urlparse import urlparse
from cStringIO import StringIO
from urllib import urlopen

def getText(nodelist):
    rc = []
    for node in nodelist:
        #if node.nodeType == node.TEXT_NODE:
        rc.append(node.data)
    return ''.join(rc)

def addFiles(arg, dirname, names):
	for name in names:
		path = os.path.join( dirname, name )
		if not os.path.samefile( path, arg[0] ):
			if not os.path.isdir(path):
				arg[1].append( os.path.normpath(path) )

def putData( url, data ):
	u = urlparse( url )
	curConn = httplib.HTTPConnection(u.netloc)
	curServer = u.netloc
	curConn.request("PUT", u.path, data, {})
	outStr = StringIO( curConn.getresponse().read() )
	curConn.close()
	return outStr
	
def parseRemusXML(server, path):
	"""
	XML loader is depreciated
	"""
	dir = os.path.dirname( path )
	handle = open( path )
	dom = parseString( handle.read() )
	handle.close()	
	includeFiles = []
	pipelineName = dom.childNodes[0].getAttribute("id")
	desc = dom.childNodes[0].getAttribute("desc")
	url = server + "/@pipeline/" + pipelineName 
	data = json.dumps( { "id" : pipelineName, "description" : desc } )
	print url
	print putData( url, data ).read()
	initData = {}
	
	for node in dom.childNodes[0].childNodes:
		if node.nodeType == node.ELEMENT_NODE:
			if node.localName.startswith( "remus_" ):
				remusNode = {}
				remusNode['_mode'] = node.localName.replace("remus_", "")
				remusNode['_id'] = node.getAttribute('id')
				remusNode['_src'] = node.getAttribute('input').split(',')
				remusNode['_type'] = node.getAttribute('type' )
				if node.hasAttribute('output'):
					remusNode[ 'output' ] = node.getAttribute( 'output' ).split(',')
				for i in range(node.attributes.length):
					name = node.attributes.item(i).localName
					value = node.attributes.item(i).value
					if not name in ['id', 'input', 'output', 'type', 'code' ]:
						remusNode[ name ] = value
				remusNode['code'] = getText( node.childNodes )
				url = server + "/" + pipelineName + "/@pipeline/" + remusNode['id']  
				print url
				data = json.dumps( remusNode )
				print putData( url, data ).read()
			if node.localName == "include":
				includePath = os.path.join( dir, node.getAttribute("path") )
				if os.path.isdir( includePath ):
					os.path.walk( includePath, addFiles, [ path, includeFiles ] )
				else:
					includeFiles.append( includePath )
			if node.localName == "init_store":
				applet = node.getAttribute('_applet')
				subKey = node.getAttribute('_submitKey')
				if not initData.has_key( subKey ):
					initData[ subKey ] = {}
				initData[ subKey ][ applet ] = getText( node.childNodes )				
	for file in includeFiles:
		url = server + "/" + pipelineName + "/@attach/" + file.replace('/', '%2F')
		print url
		handle = open( file )
		print putData( url, handle.read() ).read()
		handle.close()
	
	for subKey in initData:
		submitData = "{}"
		print urlopen( "%s/%s/@submit/%s" % (server, pipelineName, subKey), submitData ).read()
		for applet in initData[ subKey ]:
			print putData( "%s/%s/%s/%s" % ( server, pipelineName, subKey, applet ), initData[ subKey ][ applet ]  ).read()


def parseRemusJSON(server, path):
	baseDir = os.path.dirname( path )
	handle = open( path )
	pipelineData = json.loads( handle.read() )
	
	pipelineName = pipelineData[ "_id" ]

	url = server + "/@pipeline/" + pipelineName 
	data = json.dumps( { "id" : pipelineName } )

	print url
	print putData( url, data ).read()

	fileList = copy( pipelineData['_include'] )

	initData = {}
	
	for name in pipelineData:
		if name not in [ "_id", "_include" ]:
			node = pipelineData[ name ]
			if node[ '_mode' ] in [ "split", "map", "reduce", "merge", "match", "pipe", "store", "agent" ]:
				if node.has_key( "_code" ):
					fileList.append( node[ "_code" ] )				
				
				if node.has_key( "_init" ):					
					if not initData.has_key( node[ "_init" ][ "_submitKey" ] ):
						initData[ node[ "_init" ][ "_submitKey" ] ] = {}
					initData[ node[ "_init" ][ "_submitKey" ] ][ name ] = json.dumps( node[ "_init" ].get("_data", {}) )
					del node[ "_init" ]
				
				url = server + "/" + pipelineName + "/@pipeline/" + name  				
				print url
				data = json.dumps( node )
				print putData( url, data ).read()
				
	for file in fileList:
		srcPath = os.path.join( baseDir, file ) 
		url = server + "/" + pipelineName + "/@attach/" + file.replace('/', '%2F')
		print "LOADING", url
		handle = open( srcPath )
		print putData( url, handle.read() ).read()
		handle.close()

	for subKey in initData:
		submitData = "{}"
		print "INIT: ", subKey, initData[ subKey ].keys()
		print urlopen( "%s/%s/@submit/%s" % (server, pipelineName, subKey), submitData ).read()
		for applet in initData[ subKey ]:
			print putData( "%s/%s/%s/%s" % ( server, pipelineName, subKey, applet ), initData[ subKey ][ applet ]  ).read()

	
if __name__ == "__main__":
	for path in sys.argv[2:]:
		if path.endswith(".xml"):
			parseRemusXML( sys.argv[1], path )
		if path.endswith(".json"):
			parseRemusJSON( sys.argv[1], path )
		
