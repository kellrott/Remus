#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import RemusNet
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string status()'
  print '  bool containsKey(AppletRef stack, string key)'
  print '   keySlice(AppletRef stack, string keyStart, i32 count)'
  print '   getValueJSON(AppletRef stack, string key)'
  print '  i64 keyCount(AppletRef stack, i32 maxCount)'
  print '  void addData(AppletRef stack, i64 jobID, i64 emitID, string key, string data)'
  print '   keyValJSONSlice(AppletRef stack, string startKey, i32 count)'
  print '  void deleteStack(AppletRef stack)'
  print '  void deleteValue(AppletRef stack, string key)'
  print '  i64 getTimeStamp(AppletRef stack)'
  print '  void initAttachment(AppletRef stack, string key, string name, i64 length)'
  print '  i64 getAttachmentSize(AppletRef stack, string key, string name)'
  print '  string readBlock(AppletRef stack, string key, string name, i64 offset, i32 length)'
  print '  void writeBlock(AppletRef stack, string key, string name, i64 offset, string data)'
  print '   listAttachments(AppletRef stack, string key)'
  print '  bool hasAttachment(AppletRef stack, string key, string name)'
  print '  void deleteAttachment(AppletRef stack, string key, string name)'
  print '  string jobRequest(string dataServer, string attachServer, WorkDesc work)'
  print '  JobStatus jobStatus(string jobID)'
  print '  i32 jobCancel(string jobID)'
  print '  void scheduleRequest()'
  print '  string scheduleInfoJSON()'
  print '  void addPeer(PeerInfoThrift info)'
  print '  void delPeer(string peerName)'
  print '   getPeers()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RemusNet.Client(protocol)
transport.open()

if cmd == 'status':
  if len(args) != 0:
    print 'status requires 0 args'
    sys.exit(1)
  pp.pprint(client.status())

elif cmd == 'containsKey':
  if len(args) != 2:
    print 'containsKey requires 2 args'
    sys.exit(1)
  pp.pprint(client.containsKey(eval(args[0]),args[1],))

elif cmd == 'keySlice':
  if len(args) != 3:
    print 'keySlice requires 3 args'
    sys.exit(1)
  pp.pprint(client.keySlice(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'getValueJSON':
  if len(args) != 2:
    print 'getValueJSON requires 2 args'
    sys.exit(1)
  pp.pprint(client.getValueJSON(eval(args[0]),args[1],))

elif cmd == 'keyCount':
  if len(args) != 2:
    print 'keyCount requires 2 args'
    sys.exit(1)
  pp.pprint(client.keyCount(eval(args[0]),eval(args[1]),))

elif cmd == 'addData':
  if len(args) != 5:
    print 'addData requires 5 args'
    sys.exit(1)
  pp.pprint(client.addData(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],))

elif cmd == 'keyValJSONSlice':
  if len(args) != 3:
    print 'keyValJSONSlice requires 3 args'
    sys.exit(1)
  pp.pprint(client.keyValJSONSlice(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'deleteStack':
  if len(args) != 1:
    print 'deleteStack requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteStack(eval(args[0]),))

elif cmd == 'deleteValue':
  if len(args) != 2:
    print 'deleteValue requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteValue(eval(args[0]),args[1],))

elif cmd == 'getTimeStamp':
  if len(args) != 1:
    print 'getTimeStamp requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTimeStamp(eval(args[0]),))

elif cmd == 'initAttachment':
  if len(args) != 4:
    print 'initAttachment requires 4 args'
    sys.exit(1)
  pp.pprint(client.initAttachment(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'getAttachmentSize':
  if len(args) != 3:
    print 'getAttachmentSize requires 3 args'
    sys.exit(1)
  pp.pprint(client.getAttachmentSize(eval(args[0]),args[1],args[2],))

elif cmd == 'readBlock':
  if len(args) != 5:
    print 'readBlock requires 5 args'
    sys.exit(1)
  pp.pprint(client.readBlock(eval(args[0]),args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'writeBlock':
  if len(args) != 5:
    print 'writeBlock requires 5 args'
    sys.exit(1)
  pp.pprint(client.writeBlock(eval(args[0]),args[1],args[2],eval(args[3]),args[4],))

elif cmd == 'listAttachments':
  if len(args) != 2:
    print 'listAttachments requires 2 args'
    sys.exit(1)
  pp.pprint(client.listAttachments(eval(args[0]),args[1],))

elif cmd == 'hasAttachment':
  if len(args) != 3:
    print 'hasAttachment requires 3 args'
    sys.exit(1)
  pp.pprint(client.hasAttachment(eval(args[0]),args[1],args[2],))

elif cmd == 'deleteAttachment':
  if len(args) != 3:
    print 'deleteAttachment requires 3 args'
    sys.exit(1)
  pp.pprint(client.deleteAttachment(eval(args[0]),args[1],args[2],))

elif cmd == 'jobRequest':
  if len(args) != 3:
    print 'jobRequest requires 3 args'
    sys.exit(1)
  pp.pprint(client.jobRequest(args[0],args[1],eval(args[2]),))

elif cmd == 'jobStatus':
  if len(args) != 1:
    print 'jobStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.jobStatus(args[0],))

elif cmd == 'jobCancel':
  if len(args) != 1:
    print 'jobCancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.jobCancel(args[0],))

elif cmd == 'scheduleRequest':
  if len(args) != 0:
    print 'scheduleRequest requires 0 args'
    sys.exit(1)
  pp.pprint(client.scheduleRequest())

elif cmd == 'scheduleInfoJSON':
  if len(args) != 0:
    print 'scheduleInfoJSON requires 0 args'
    sys.exit(1)
  pp.pprint(client.scheduleInfoJSON())

elif cmd == 'addPeer':
  if len(args) != 1:
    print 'addPeer requires 1 args'
    sys.exit(1)
  pp.pprint(client.addPeer(eval(args[0]),))

elif cmd == 'delPeer':
  if len(args) != 1:
    print 'delPeer requires 1 args'
    sys.exit(1)
  pp.pprint(client.delPeer(args[0],))

elif cmd == 'getPeers':
  if len(args) != 0:
    print 'getPeers requires 0 args'
    sys.exit(1)
  pp.pprint(client.getPeers())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
