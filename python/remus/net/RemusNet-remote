#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import RemusNet
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool containsKey(TableRef table, string key)'
  print '   keySlice(TableRef table, string keyStart, i32 count)'
  print '   getValueJSON(TableRef table, string key)'
  print '  bool hasKey(TableRef table, string key)'
  print '  void addDataJSON(TableRef table, string key, string data)'
  print '   keyValJSONSlice(TableRef table, string startKey, i32 count)'
  print '  void createInstanceJSON(string instance, string instanceJSON)'
  print '  void createTableJSON(TableRef table, string tableJSON)'
  print '  bool hasTable(TableRef table)'
  print '   listTables(string instance)'
  print '   listInstances()'
  print '  void deleteInstance(string instance)'
  print '  void deleteTable(TableRef table)'
  print '  bool syncTable(TableRef table)'
  print '  TableStatus tableStatus(TableRef table)'
  print '   tableSlice(string startKey, i32 count)'
  print '  void initAttachment(TableRef table, string key, string name)'
  print '  AttachmentInfo getAttachmentInfo(TableRef table, string key, string name)'
  print '  string readBlock(TableRef table, string key, string name, i64 offset, i32 length)'
  print '  void appendBlock(TableRef table, string key, string name, string data)'
  print '   listAttachments(TableRef table, string key)'
  print '  bool hasAttachment(TableRef table, string key, string name)'
  print '  void deleteAttachment(TableRef table, string key, string name)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RemusNet.Client(protocol)
transport.open()

if cmd == 'containsKey':
  if len(args) != 2:
    print 'containsKey requires 2 args'
    sys.exit(1)
  pp.pprint(client.containsKey(eval(args[0]),args[1],))

elif cmd == 'keySlice':
  if len(args) != 3:
    print 'keySlice requires 3 args'
    sys.exit(1)
  pp.pprint(client.keySlice(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'getValueJSON':
  if len(args) != 2:
    print 'getValueJSON requires 2 args'
    sys.exit(1)
  pp.pprint(client.getValueJSON(eval(args[0]),args[1],))

elif cmd == 'hasKey':
  if len(args) != 2:
    print 'hasKey requires 2 args'
    sys.exit(1)
  pp.pprint(client.hasKey(eval(args[0]),args[1],))

elif cmd == 'addDataJSON':
  if len(args) != 3:
    print 'addDataJSON requires 3 args'
    sys.exit(1)
  pp.pprint(client.addDataJSON(eval(args[0]),args[1],args[2],))

elif cmd == 'keyValJSONSlice':
  if len(args) != 3:
    print 'keyValJSONSlice requires 3 args'
    sys.exit(1)
  pp.pprint(client.keyValJSONSlice(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'createInstanceJSON':
  if len(args) != 2:
    print 'createInstanceJSON requires 2 args'
    sys.exit(1)
  pp.pprint(client.createInstanceJSON(args[0],args[1],))

elif cmd == 'createTableJSON':
  if len(args) != 2:
    print 'createTableJSON requires 2 args'
    sys.exit(1)
  pp.pprint(client.createTableJSON(eval(args[0]),args[1],))

elif cmd == 'hasTable':
  if len(args) != 1:
    print 'hasTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.hasTable(eval(args[0]),))

elif cmd == 'listTables':
  if len(args) != 1:
    print 'listTables requires 1 args'
    sys.exit(1)
  pp.pprint(client.listTables(args[0],))

elif cmd == 'listInstances':
  if len(args) != 0:
    print 'listInstances requires 0 args'
    sys.exit(1)
  pp.pprint(client.listInstances())

elif cmd == 'deleteInstance':
  if len(args) != 1:
    print 'deleteInstance requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteInstance(args[0],))

elif cmd == 'deleteTable':
  if len(args) != 1:
    print 'deleteTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteTable(eval(args[0]),))

elif cmd == 'syncTable':
  if len(args) != 1:
    print 'syncTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.syncTable(eval(args[0]),))

elif cmd == 'tableStatus':
  if len(args) != 1:
    print 'tableStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.tableStatus(eval(args[0]),))

elif cmd == 'tableSlice':
  if len(args) != 2:
    print 'tableSlice requires 2 args'
    sys.exit(1)
  pp.pprint(client.tableSlice(args[0],eval(args[1]),))

elif cmd == 'initAttachment':
  if len(args) != 3:
    print 'initAttachment requires 3 args'
    sys.exit(1)
  pp.pprint(client.initAttachment(eval(args[0]),args[1],args[2],))

elif cmd == 'getAttachmentInfo':
  if len(args) != 3:
    print 'getAttachmentInfo requires 3 args'
    sys.exit(1)
  pp.pprint(client.getAttachmentInfo(eval(args[0]),args[1],args[2],))

elif cmd == 'readBlock':
  if len(args) != 5:
    print 'readBlock requires 5 args'
    sys.exit(1)
  pp.pprint(client.readBlock(eval(args[0]),args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'appendBlock':
  if len(args) != 4:
    print 'appendBlock requires 4 args'
    sys.exit(1)
  pp.pprint(client.appendBlock(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'listAttachments':
  if len(args) != 2:
    print 'listAttachments requires 2 args'
    sys.exit(1)
  pp.pprint(client.listAttachments(eval(args[0]),args[1],))

elif cmd == 'hasAttachment':
  if len(args) != 3:
    print 'hasAttachment requires 3 args'
    sys.exit(1)
  pp.pprint(client.hasAttachment(eval(args[0]),args[1],args[2],))

elif cmd == 'deleteAttachment':
  if len(args) != 3:
    print 'deleteAttachment requires 3 args'
    sys.exit(1)
  pp.pprint(client.deleteAttachment(eval(args[0]),args[1],args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
