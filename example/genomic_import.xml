<html>


<remus_splitter id="archive_list" type="python">
<![CDATA[
import remus
import tcga
@remus.splitter
def archive_list( handle ):
	alist = tcga.ArchiveList()
	alist.download()
	for id in alist:
		url = tcga.host + alist[id]['deployLocation']
		if ( alist[id]['isLatest'] == "1" ):
			remus.emit( url, alist[id] )
]]>
</remus_splitter>

<remus_mapper id="archive_fetch_info" input=":archive_list" type="python">
<![CDATA[
import remus
import tcga
@remus.mapper
def genomic_archive_platform( key, val ):
	id = val['id']
	plat = tcga.Platform( id )
	plat.download()
	for a in plat:
		val[ 'platformName' ] = plat[a]['name']	
	archive = tcga.ArchiveType( id )
	archive.download()
	for a in archive:
		val[ 'archiveType' ] = archive[a]['type']	
	remus.emit( key, val )
]]>
</remus_mapper>


<remus_mapper id="Level3_filter" input=":archive_fetch_info" type="python">
<![CDATA[
import remus
from urlparse import urlparse
from urllib import urlopen
import os
import tarfile
@remus.mapper
def Level3_filter( key, val ):
	if ( val['archiveType'] == "Level_3" ):
		remus.emit( key, val )
]]>
</remus_mapper>


<remus_mapper id="archive_cache" input=":Level3_filter" type="python">
<![CDATA[
import remus
import json
from urllib import urlopen
@remus.mapper
def archive_cache( key, val ):
	cacheURL = "http://localhost:8080/WebCache"
	urlopen( cacheURL, key )
	fileMap = json.loads( (urlopen(cacheURL).read()) )
	if ( fileMap["files"].has_key( key ) ):
		uuid = fileMap["files"][ key ][ "uuid" ]
		versions = json.loads( (urlopen("%s/%s" % (cacheURL, uuid) ).read()) )
		if ( versions.has_key( "latest" ) ):
			digest = versions[ "latest" ]	
			val[ "cacheURL" ] = "%s/%s/%s" % (cacheURL, uuid, digest)
			remus.emit( key, val )
]]>
</remus_mapper>


<remus_mapper id="HumanMethylation27_filter" input=":archive_cache" type="python">
<![CDATA[
import remus
from urlparse import urlparse
from urllib import urlopen
import os
import tarfile
@remus.mapper
def HumanMethylation27_filter( key, val ):
	if ( val[ 'platformName' ] == "HumanMethylation27" and val['archiveType'] == "Level_3" ):
		#do dynamic submission here
		instance = remus.submit( "/methylation27:pipelineStart", key, val )
		remus.emit( key, instance )
]]>
</remus_mapper>


<!-- remus_mapper id="G4447A_filter" input=":genomic_archive_platform" type="python">
<![CDATA[
import remus
from urlparse import urlparse
from urllib import urlopen
import os
import tarfile
@remus.mapper
def G44472_filter( key, val ):
	if ( val[ 'platformName' ] == "CGH-1x1M_G4447A" ):
		if os.path.exists( val['tarball'] ):
			tar = tarfile.open( val['tarball'] )
			fileCount = 0
			for tinfo in tar.getmembers():
				if tinfo.isfile() and tinfo.name.endswith("_out.txt"):
					fileCount += 1
			print val['tarball'], fileCount 
]]>
</remus_mapper -->




</html>
