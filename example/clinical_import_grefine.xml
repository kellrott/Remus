<html>
<remus_splitter id="file_list">
<![CDATA[
import remus
import gRefine
import re
@remus.splitter
def testfunc( handle ):
	ref = gRefine.Refine( "http://localhost:3333" )
	projects = ref.projectList()
	for projID in projects:
		tmp = re.split( "_", projects[projID]["name"] )
		name = tmp[1]
		remus.emit( projID, name )
]]>

</remus_splitter>
<!-- 
load a csv file and map each row with named columns to the 
sample name (first column)  
-->
<remus_mapper id="mapper_csv" type="python" input=":file_list">
<![CDATA[
import remus
import re
import gRefine
reTab = re.compile(r'\t')
@remus.mapper
def testfunc( key, val ):
	ref = gRefine.Refine( "http://localhost:3333" )
	handle = ref.getTSV( key )
	header = None	
	for line in handle:
		tmp = reTab.split( line.rstrip() )
		if header is None:
			header = []
			for name in tmp:
				if name.startswith( val ):
					header.append( name )
				else:
					header.append( "%s_%s" % (val, name) )
		else:
			out = {}
			for i in range(1, len(tmp)):
				if ( tmp[i] != "null" ):
					out[ header[i] ] = tmp[i]
			if ( len(out) ):
				remus.emit( tmp[0], out )
	handle.close()
]]>
</remus_mapper>

<remus_reducer id="sample_remap" input=":mapper_csv" type="python">
<![CDATA[
import remus
import re
reSample = re.compile(r'^(....\-..\-....)\-(...)')
@remus.reducer
def barcode_remap( key, vals ):
	res = reSample.search( key )
	if res:
		out = { key : [] }
		for val in vals:
			out[key].append( val )
		remus.emit( res.group(1), out )
	else:
		out = { key : [] }
		for val in vals:
			out[key].append( val )
		remus.emit( key, out )
]]>
</remus_reducer>

<remus_reducer id="sample_condence" input=":sample_remap" type="python">
<![CDATA[
import remus
import re
reSample = re.compile(r'^(....\-..\-....)\-(...)')
@remus.reducer
def sample_reduce( key, vals ):
	outmap = {}
	for sampleSet in vals:
		for sampleName in sampleSet:
			if not outmap.has_key( sampleName ):
				outmap[ sampleName ] = {}
			for valSet in sampleSet[ sampleName ]:
				for valKey in valSet:
					if not outmap[sampleName].has_key( valKey ):
						outmap[sampleName][ valKey ] = []
					outmap[sampleName][ valKey ].append( valSet[ valKey ] )
	remus.emit( key, outmap )
]]>
</remus_reducer>

<remus_mapper id="column_map" input=":sample_condence" type="python">
<![CDATA[
import remus
@remus.mapper
def col_map( key, val ):
	for sampleSet in val: 
		for sampleKey in val[sampleSet]:
			for sampleVal in val[sampleSet][ sampleKey ]:
				remus.emit( sampleKey, sampleVal )
]]>
</remus_mapper>

<remus_reducer id="column_enumerate" input=":column_map" type="python" output="enumMap,enumCols,floatCols">
<![CDATA[
import remus
@remus.reducer
def col_map( key, vals ):
	out = {}
	allFloat = True
	first = True
	minVal = None
	maxVal = None	
	for val in vals:
		try:
			if ( val != "null" ):
				i = float(val.replace(",", ""))
				if first:
					minVal = i
					maxVal = i
					first = False
				minVal = min(minVal,i)
				maxVal = max(maxVal,i)
				print minVal, maxVal
		except ValueError:
			allFloat = False
				
		if not out.has_key( val ):
			out[ val ] = len(out)
	
	if key.count("barcode") == 0 and len(out) > 1:
		if ( allFloat ):
			print minVal, maxVal
			remus.emit( key, [minVal,maxVal], "floatCols" )
		else:
			remus.emit( key, out, "enumCols" )		
]]>
</remus_reducer>

<!-- remus_mapper id="sample_sequence_split" input=":sample_condence" output="point,sequence" type="python">
<![CDATA[
import remus
@remus.mapper
def col_map( key, val ):
	for valKey in val:
		if ( len( val[valKey] ) == 1 ):
			remus.emit( key, { valKey : val[valKey][0] }, "point" )
		else:
			remus.emit( key, { valKey : val[valKey] }, "sequence" )
]]>
</remus_mapper-->

</html>
