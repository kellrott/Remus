/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.remus.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PeerInfoThrift implements org.apache.thrift.TBase<PeerInfoThrift, PeerInfoThrift._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PeerInfoThrift");

  private static final org.apache.thrift.protocol.TField PEER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("peerType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PEER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("peerID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WORK_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("workTypes", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("timeDelta", org.apache.thrift.protocol.TType.I32, (short)7);

  /**
   * 
   * @see PeerType
   */
  public PeerType peerType;
  public String name;
  public String peerID;
  public String groupName;
  public List<String> workTypes;
  public PeerAddress addr;
  public int timeDelta;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PeerType
     */
    PEER_TYPE((short)1, "peerType"),
    NAME((short)2, "name"),
    PEER_ID((short)3, "peerID"),
    GROUP_NAME((short)4, "groupName"),
    WORK_TYPES((short)5, "workTypes"),
    ADDR((short)6, "addr"),
    TIME_DELTA((short)7, "timeDelta");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PEER_TYPE
          return PEER_TYPE;
        case 2: // NAME
          return NAME;
        case 3: // PEER_ID
          return PEER_ID;
        case 4: // GROUP_NAME
          return GROUP_NAME;
        case 5: // WORK_TYPES
          return WORK_TYPES;
        case 6: // ADDR
          return ADDR;
        case 7: // TIME_DELTA
          return TIME_DELTA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMEDELTA_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PEER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("peerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PeerType.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PEER_ID, new org.apache.thrift.meta_data.FieldMetaData("peerID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_TYPES, new org.apache.thrift.meta_data.FieldMetaData("workTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PeerAddress.class)));
    tmpMap.put(_Fields.TIME_DELTA, new org.apache.thrift.meta_data.FieldMetaData("timeDelta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PeerInfoThrift.class, metaDataMap);
  }

  public PeerInfoThrift() {
  }

  public PeerInfoThrift(
    PeerType peerType,
    String name)
  {
    this();
    this.peerType = peerType;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PeerInfoThrift(PeerInfoThrift other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPeerType()) {
      this.peerType = other.peerType;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPeerID()) {
      this.peerID = other.peerID;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetWorkTypes()) {
      List<String> __this__workTypes = new ArrayList<String>();
      for (String other_element : other.workTypes) {
        __this__workTypes.add(other_element);
      }
      this.workTypes = __this__workTypes;
    }
    if (other.isSetAddr()) {
      this.addr = new PeerAddress(other.addr);
    }
    this.timeDelta = other.timeDelta;
  }

  public PeerInfoThrift deepCopy() {
    return new PeerInfoThrift(this);
  }

  @Override
  public void clear() {
    this.peerType = null;
    this.name = null;
    this.peerID = null;
    this.groupName = null;
    this.workTypes = null;
    this.addr = null;
    setTimeDeltaIsSet(false);
    this.timeDelta = 0;
  }

  /**
   * 
   * @see PeerType
   */
  public PeerType getPeerType() {
    return this.peerType;
  }

  /**
   * 
   * @see PeerType
   */
  public PeerInfoThrift setPeerType(PeerType peerType) {
    this.peerType = peerType;
    return this;
  }

  public void unsetPeerType() {
    this.peerType = null;
  }

  /** Returns true if field peerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPeerType() {
    return this.peerType != null;
  }

  public void setPeerTypeIsSet(boolean value) {
    if (!value) {
      this.peerType = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public PeerInfoThrift setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPeerID() {
    return this.peerID;
  }

  public PeerInfoThrift setPeerID(String peerID) {
    this.peerID = peerID;
    return this;
  }

  public void unsetPeerID() {
    this.peerID = null;
  }

  /** Returns true if field peerID is set (has been assigned a value) and false otherwise */
  public boolean isSetPeerID() {
    return this.peerID != null;
  }

  public void setPeerIDIsSet(boolean value) {
    if (!value) {
      this.peerID = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public PeerInfoThrift setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public int getWorkTypesSize() {
    return (this.workTypes == null) ? 0 : this.workTypes.size();
  }

  public java.util.Iterator<String> getWorkTypesIterator() {
    return (this.workTypes == null) ? null : this.workTypes.iterator();
  }

  public void addToWorkTypes(String elem) {
    if (this.workTypes == null) {
      this.workTypes = new ArrayList<String>();
    }
    this.workTypes.add(elem);
  }

  public List<String> getWorkTypes() {
    return this.workTypes;
  }

  public PeerInfoThrift setWorkTypes(List<String> workTypes) {
    this.workTypes = workTypes;
    return this;
  }

  public void unsetWorkTypes() {
    this.workTypes = null;
  }

  /** Returns true if field workTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkTypes() {
    return this.workTypes != null;
  }

  public void setWorkTypesIsSet(boolean value) {
    if (!value) {
      this.workTypes = null;
    }
  }

  public PeerAddress getAddr() {
    return this.addr;
  }

  public PeerInfoThrift setAddr(PeerAddress addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  /** Returns true if field addr is set (has been assigned a value) and false otherwise */
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean value) {
    if (!value) {
      this.addr = null;
    }
  }

  public int getTimeDelta() {
    return this.timeDelta;
  }

  public PeerInfoThrift setTimeDelta(int timeDelta) {
    this.timeDelta = timeDelta;
    setTimeDeltaIsSet(true);
    return this;
  }

  public void unsetTimeDelta() {
    __isset_bit_vector.clear(__TIMEDELTA_ISSET_ID);
  }

  /** Returns true if field timeDelta is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeDelta() {
    return __isset_bit_vector.get(__TIMEDELTA_ISSET_ID);
  }

  public void setTimeDeltaIsSet(boolean value) {
    __isset_bit_vector.set(__TIMEDELTA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PEER_TYPE:
      if (value == null) {
        unsetPeerType();
      } else {
        setPeerType((PeerType)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PEER_ID:
      if (value == null) {
        unsetPeerID();
      } else {
        setPeerID((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case WORK_TYPES:
      if (value == null) {
        unsetWorkTypes();
      } else {
        setWorkTypes((List<String>)value);
      }
      break;

    case ADDR:
      if (value == null) {
        unsetAddr();
      } else {
        setAddr((PeerAddress)value);
      }
      break;

    case TIME_DELTA:
      if (value == null) {
        unsetTimeDelta();
      } else {
        setTimeDelta((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PEER_TYPE:
      return getPeerType();

    case NAME:
      return getName();

    case PEER_ID:
      return getPeerID();

    case GROUP_NAME:
      return getGroupName();

    case WORK_TYPES:
      return getWorkTypes();

    case ADDR:
      return getAddr();

    case TIME_DELTA:
      return new Integer(getTimeDelta());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PEER_TYPE:
      return isSetPeerType();
    case NAME:
      return isSetName();
    case PEER_ID:
      return isSetPeerID();
    case GROUP_NAME:
      return isSetGroupName();
    case WORK_TYPES:
      return isSetWorkTypes();
    case ADDR:
      return isSetAddr();
    case TIME_DELTA:
      return isSetTimeDelta();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PeerInfoThrift)
      return this.equals((PeerInfoThrift)that);
    return false;
  }

  public boolean equals(PeerInfoThrift that) {
    if (that == null)
      return false;

    boolean this_present_peerType = true && this.isSetPeerType();
    boolean that_present_peerType = true && that.isSetPeerType();
    if (this_present_peerType || that_present_peerType) {
      if (!(this_present_peerType && that_present_peerType))
        return false;
      if (!this.peerType.equals(that.peerType))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_peerID = true && this.isSetPeerID();
    boolean that_present_peerID = true && that.isSetPeerID();
    if (this_present_peerID || that_present_peerID) {
      if (!(this_present_peerID && that_present_peerID))
        return false;
      if (!this.peerID.equals(that.peerID))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_workTypes = true && this.isSetWorkTypes();
    boolean that_present_workTypes = true && that.isSetWorkTypes();
    if (this_present_workTypes || that_present_workTypes) {
      if (!(this_present_workTypes && that_present_workTypes))
        return false;
      if (!this.workTypes.equals(that.workTypes))
        return false;
    }

    boolean this_present_addr = true && this.isSetAddr();
    boolean that_present_addr = true && that.isSetAddr();
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (!this.addr.equals(that.addr))
        return false;
    }

    boolean this_present_timeDelta = true && this.isSetTimeDelta();
    boolean that_present_timeDelta = true && that.isSetTimeDelta();
    if (this_present_timeDelta || that_present_timeDelta) {
      if (!(this_present_timeDelta && that_present_timeDelta))
        return false;
      if (this.timeDelta != that.timeDelta)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PeerInfoThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PeerInfoThrift typedOther = (PeerInfoThrift)other;

    lastComparison = Boolean.valueOf(isSetPeerType()).compareTo(typedOther.isSetPeerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peerType, typedOther.peerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeerID()).compareTo(typedOther.isSetPeerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peerID, typedOther.peerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkTypes()).compareTo(typedOther.isSetWorkTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workTypes, typedOther.workTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddr()).compareTo(typedOther.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, typedOther.addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeDelta()).compareTo(typedOther.isSetTimeDelta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeDelta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeDelta, typedOther.timeDelta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PEER_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.peerType = PeerType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PEER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.peerID = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // GROUP_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.groupName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // WORK_TYPES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              this.workTypes = new ArrayList<String>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                String _elem6;
                _elem6 = iprot.readString();
                this.workTypes.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ADDR
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.addr = new PeerAddress();
            this.addr.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TIME_DELTA
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.timeDelta = iprot.readI32();
            setTimeDeltaIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.peerType != null) {
      oprot.writeFieldBegin(PEER_TYPE_FIELD_DESC);
      oprot.writeI32(this.peerType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.peerID != null) {
      if (isSetPeerID()) {
        oprot.writeFieldBegin(PEER_ID_FIELD_DESC);
        oprot.writeString(this.peerID);
        oprot.writeFieldEnd();
      }
    }
    if (this.groupName != null) {
      if (isSetGroupName()) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
    }
    if (this.workTypes != null) {
      if (isSetWorkTypes()) {
        oprot.writeFieldBegin(WORK_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.workTypes.size()));
          for (String _iter7 : this.workTypes)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.addr != null) {
      if (isSetAddr()) {
        oprot.writeFieldBegin(ADDR_FIELD_DESC);
        this.addr.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetTimeDelta()) {
      oprot.writeFieldBegin(TIME_DELTA_FIELD_DESC);
      oprot.writeI32(this.timeDelta);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PeerInfoThrift(");
    boolean first = true;

    sb.append("peerType:");
    if (this.peerType == null) {
      sb.append("null");
    } else {
      sb.append(this.peerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetPeerID()) {
      if (!first) sb.append(", ");
      sb.append("peerID:");
      if (this.peerID == null) {
        sb.append("null");
      } else {
        sb.append(this.peerID);
      }
      first = false;
    }
    if (isSetGroupName()) {
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
    }
    if (isSetWorkTypes()) {
      if (!first) sb.append(", ");
      sb.append("workTypes:");
      if (this.workTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.workTypes);
      }
      first = false;
    }
    if (isSetAddr()) {
      if (!first) sb.append(", ");
      sb.append("addr:");
      if (this.addr == null) {
        sb.append("null");
      } else {
        sb.append(this.addr);
      }
      first = false;
    }
    if (isSetTimeDelta()) {
      if (!first) sb.append(", ");
      sb.append("timeDelta:");
      sb.append(this.timeDelta);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (peerType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'peerType' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

