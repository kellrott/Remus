/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.remus.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WorkDesc implements org.apache.thrift.TBase<WorkDesc, WorkDesc._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkDesc");

  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INFO_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("infoJSON", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WORK_STACK_FIELD_DESC = new org.apache.thrift.protocol.TField("workStack", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobs", org.apache.thrift.protocol.TType.LIST, (short)5);

  public String lang;
  /**
   * 
   * @see WorkMode
   */
  public WorkMode mode;
  public String infoJSON;
  public AppletRef workStack;
  public List<Long> jobs;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LANG((short)1, "lang"),
    /**
     * 
     * @see WorkMode
     */
    MODE((short)2, "mode"),
    INFO_JSON((short)3, "infoJSON"),
    WORK_STACK((short)4, "workStack"),
    JOBS((short)5, "jobs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANG
          return LANG;
        case 2: // MODE
          return MODE;
        case 3: // INFO_JSON
          return INFO_JSON;
        case 4: // WORK_STACK
          return WORK_STACK;
        case 5: // JOBS
          return JOBS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkMode.class)));
    tmpMap.put(_Fields.INFO_JSON, new org.apache.thrift.meta_data.FieldMetaData("infoJSON", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_STACK, new org.apache.thrift.meta_data.FieldMetaData("workStack", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppletRef.class)));
    tmpMap.put(_Fields.JOBS, new org.apache.thrift.meta_data.FieldMetaData("jobs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkDesc.class, metaDataMap);
  }

  public WorkDesc() {
  }

  public WorkDesc(
    String lang,
    WorkMode mode,
    String infoJSON,
    AppletRef workStack,
    List<Long> jobs)
  {
    this();
    this.lang = lang;
    this.mode = mode;
    this.infoJSON = infoJSON;
    this.workStack = workStack;
    this.jobs = jobs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkDesc(WorkDesc other) {
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    if (other.isSetInfoJSON()) {
      this.infoJSON = other.infoJSON;
    }
    if (other.isSetWorkStack()) {
      this.workStack = new AppletRef(other.workStack);
    }
    if (other.isSetJobs()) {
      List<Long> __this__jobs = new ArrayList<Long>();
      for (Long other_element : other.jobs) {
        __this__jobs.add(other_element);
      }
      this.jobs = __this__jobs;
    }
  }

  public WorkDesc deepCopy() {
    return new WorkDesc(this);
  }

  @Override
  public void clear() {
    this.lang = null;
    this.mode = null;
    this.infoJSON = null;
    this.workStack = null;
    this.jobs = null;
  }

  public String getLang() {
    return this.lang;
  }

  public WorkDesc setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  /**
   * 
   * @see WorkMode
   */
  public WorkMode getMode() {
    return this.mode;
  }

  /**
   * 
   * @see WorkMode
   */
  public WorkDesc setMode(WorkMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public String getInfoJSON() {
    return this.infoJSON;
  }

  public WorkDesc setInfoJSON(String infoJSON) {
    this.infoJSON = infoJSON;
    return this;
  }

  public void unsetInfoJSON() {
    this.infoJSON = null;
  }

  /** Returns true if field infoJSON is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoJSON() {
    return this.infoJSON != null;
  }

  public void setInfoJSONIsSet(boolean value) {
    if (!value) {
      this.infoJSON = null;
    }
  }

  public AppletRef getWorkStack() {
    return this.workStack;
  }

  public WorkDesc setWorkStack(AppletRef workStack) {
    this.workStack = workStack;
    return this;
  }

  public void unsetWorkStack() {
    this.workStack = null;
  }

  /** Returns true if field workStack is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkStack() {
    return this.workStack != null;
  }

  public void setWorkStackIsSet(boolean value) {
    if (!value) {
      this.workStack = null;
    }
  }

  public int getJobsSize() {
    return (this.jobs == null) ? 0 : this.jobs.size();
  }

  public java.util.Iterator<Long> getJobsIterator() {
    return (this.jobs == null) ? null : this.jobs.iterator();
  }

  public void addToJobs(long elem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<Long>();
    }
    this.jobs.add(elem);
  }

  public List<Long> getJobs() {
    return this.jobs;
  }

  public WorkDesc setJobs(List<Long> jobs) {
    this.jobs = jobs;
    return this;
  }

  public void unsetJobs() {
    this.jobs = null;
  }

  /** Returns true if field jobs is set (has been assigned a value) and false otherwise */
  public boolean isSetJobs() {
    return this.jobs != null;
  }

  public void setJobsIsSet(boolean value) {
    if (!value) {
      this.jobs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((WorkMode)value);
      }
      break;

    case INFO_JSON:
      if (value == null) {
        unsetInfoJSON();
      } else {
        setInfoJSON((String)value);
      }
      break;

    case WORK_STACK:
      if (value == null) {
        unsetWorkStack();
      } else {
        setWorkStack((AppletRef)value);
      }
      break;

    case JOBS:
      if (value == null) {
        unsetJobs();
      } else {
        setJobs((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANG:
      return getLang();

    case MODE:
      return getMode();

    case INFO_JSON:
      return getInfoJSON();

    case WORK_STACK:
      return getWorkStack();

    case JOBS:
      return getJobs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANG:
      return isSetLang();
    case MODE:
      return isSetMode();
    case INFO_JSON:
      return isSetInfoJSON();
    case WORK_STACK:
      return isSetWorkStack();
    case JOBS:
      return isSetJobs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkDesc)
      return this.equals((WorkDesc)that);
    return false;
  }

  public boolean equals(WorkDesc that) {
    if (that == null)
      return false;

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_infoJSON = true && this.isSetInfoJSON();
    boolean that_present_infoJSON = true && that.isSetInfoJSON();
    if (this_present_infoJSON || that_present_infoJSON) {
      if (!(this_present_infoJSON && that_present_infoJSON))
        return false;
      if (!this.infoJSON.equals(that.infoJSON))
        return false;
    }

    boolean this_present_workStack = true && this.isSetWorkStack();
    boolean that_present_workStack = true && that.isSetWorkStack();
    if (this_present_workStack || that_present_workStack) {
      if (!(this_present_workStack && that_present_workStack))
        return false;
      if (!this.workStack.equals(that.workStack))
        return false;
    }

    boolean this_present_jobs = true && this.isSetJobs();
    boolean that_present_jobs = true && that.isSetJobs();
    if (this_present_jobs || that_present_jobs) {
      if (!(this_present_jobs && that_present_jobs))
        return false;
      if (!this.jobs.equals(that.jobs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WorkDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WorkDesc typedOther = (WorkDesc)other;

    lastComparison = Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, typedOther.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoJSON()).compareTo(typedOther.isSetInfoJSON());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoJSON()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoJSON, typedOther.infoJSON);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkStack()).compareTo(typedOther.isSetWorkStack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkStack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workStack, typedOther.workStack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobs()).compareTo(typedOther.isSetJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobs, typedOther.jobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // LANG
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.lang = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MODE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.mode = WorkMode.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INFO_JSON
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.infoJSON = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // WORK_STACK
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.workStack = new AppletRef();
            this.workStack.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // JOBS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
              this.jobs = new ArrayList<Long>(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                long _elem10;
                _elem10 = iprot.readI64();
                this.jobs.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.lang != null) {
      oprot.writeFieldBegin(LANG_FIELD_DESC);
      oprot.writeString(this.lang);
      oprot.writeFieldEnd();
    }
    if (this.mode != null) {
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI32(this.mode.getValue());
      oprot.writeFieldEnd();
    }
    if (this.infoJSON != null) {
      oprot.writeFieldBegin(INFO_JSON_FIELD_DESC);
      oprot.writeString(this.infoJSON);
      oprot.writeFieldEnd();
    }
    if (this.workStack != null) {
      oprot.writeFieldBegin(WORK_STACK_FIELD_DESC);
      this.workStack.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.jobs != null) {
      oprot.writeFieldBegin(JOBS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, this.jobs.size()));
        for (long _iter11 : this.jobs)
        {
          oprot.writeI64(_iter11);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkDesc(");
    boolean first = true;

    sb.append("lang:");
    if (this.lang == null) {
      sb.append("null");
    } else {
      sb.append(this.lang);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoJSON:");
    if (this.infoJSON == null) {
      sb.append("null");
    } else {
      sb.append(this.infoJSON);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workStack:");
    if (this.workStack == null) {
      sb.append("null");
    } else {
      sb.append(this.workStack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobs:");
    if (this.jobs == null) {
      sb.append("null");
    } else {
      sb.append(this.jobs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (lang == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lang' was not present! Struct: " + toString());
    }
    if (mode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mode' was not present! Struct: " + toString());
    }
    if (infoJSON == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'infoJSON' was not present! Struct: " + toString());
    }
    if (workStack == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'workStack' was not present! Struct: " + toString());
    }
    if (jobs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobs' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

