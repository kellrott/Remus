/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.remus.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KeyValJSONPair implements org.apache.thrift.TBase<KeyValJSONPair, KeyValJSONPair._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyValJSONPair");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("valueJson", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobID", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emitID", org.apache.thrift.protocol.TType.I64, (short)4);

  public String key;
  public String valueJson;
  public long jobID;
  public long emitID;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    VALUE_JSON((short)2, "valueJson"),
    JOB_ID((short)3, "jobID"),
    EMIT_ID((short)4, "emitID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // VALUE_JSON
          return VALUE_JSON;
        case 3: // JOB_ID
          return JOB_ID;
        case 4: // EMIT_ID
          return EMIT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBID_ISSET_ID = 0;
  private static final int __EMITID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_JSON, new org.apache.thrift.meta_data.FieldMetaData("valueJson", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("emitID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyValJSONPair.class, metaDataMap);
  }

  public KeyValJSONPair() {
  }

  public KeyValJSONPair(
    String key,
    String valueJson,
    long jobID,
    long emitID)
  {
    this();
    this.key = key;
    this.valueJson = valueJson;
    this.jobID = jobID;
    setJobIDIsSet(true);
    this.emitID = emitID;
    setEmitIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeyValJSONPair(KeyValJSONPair other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetValueJson()) {
      this.valueJson = other.valueJson;
    }
    this.jobID = other.jobID;
    this.emitID = other.emitID;
  }

  public KeyValJSONPair deepCopy() {
    return new KeyValJSONPair(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.valueJson = null;
    setJobIDIsSet(false);
    this.jobID = 0;
    setEmitIDIsSet(false);
    this.emitID = 0;
  }

  public String getKey() {
    return this.key;
  }

  public KeyValJSONPair setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public String getValueJson() {
    return this.valueJson;
  }

  public KeyValJSONPair setValueJson(String valueJson) {
    this.valueJson = valueJson;
    return this;
  }

  public void unsetValueJson() {
    this.valueJson = null;
  }

  /** Returns true if field valueJson is set (has been assigned a value) and false otherwise */
  public boolean isSetValueJson() {
    return this.valueJson != null;
  }

  public void setValueJsonIsSet(boolean value) {
    if (!value) {
      this.valueJson = null;
    }
  }

  public long getJobID() {
    return this.jobID;
  }

  public KeyValJSONPair setJobID(long jobID) {
    this.jobID = jobID;
    setJobIDIsSet(true);
    return this;
  }

  public void unsetJobID() {
    __isset_bit_vector.clear(__JOBID_ISSET_ID);
  }

  /** Returns true if field jobID is set (has been assigned a value) and false otherwise */
  public boolean isSetJobID() {
    return __isset_bit_vector.get(__JOBID_ISSET_ID);
  }

  public void setJobIDIsSet(boolean value) {
    __isset_bit_vector.set(__JOBID_ISSET_ID, value);
  }

  public long getEmitID() {
    return this.emitID;
  }

  public KeyValJSONPair setEmitID(long emitID) {
    this.emitID = emitID;
    setEmitIDIsSet(true);
    return this;
  }

  public void unsetEmitID() {
    __isset_bit_vector.clear(__EMITID_ISSET_ID);
  }

  /** Returns true if field emitID is set (has been assigned a value) and false otherwise */
  public boolean isSetEmitID() {
    return __isset_bit_vector.get(__EMITID_ISSET_ID);
  }

  public void setEmitIDIsSet(boolean value) {
    __isset_bit_vector.set(__EMITID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case VALUE_JSON:
      if (value == null) {
        unsetValueJson();
      } else {
        setValueJson((String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobID();
      } else {
        setJobID((Long)value);
      }
      break;

    case EMIT_ID:
      if (value == null) {
        unsetEmitID();
      } else {
        setEmitID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case VALUE_JSON:
      return getValueJson();

    case JOB_ID:
      return new Long(getJobID());

    case EMIT_ID:
      return new Long(getEmitID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case VALUE_JSON:
      return isSetValueJson();
    case JOB_ID:
      return isSetJobID();
    case EMIT_ID:
      return isSetEmitID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeyValJSONPair)
      return this.equals((KeyValJSONPair)that);
    return false;
  }

  public boolean equals(KeyValJSONPair that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_valueJson = true && this.isSetValueJson();
    boolean that_present_valueJson = true && that.isSetValueJson();
    if (this_present_valueJson || that_present_valueJson) {
      if (!(this_present_valueJson && that_present_valueJson))
        return false;
      if (!this.valueJson.equals(that.valueJson))
        return false;
    }

    boolean this_present_jobID = true;
    boolean that_present_jobID = true;
    if (this_present_jobID || that_present_jobID) {
      if (!(this_present_jobID && that_present_jobID))
        return false;
      if (this.jobID != that.jobID)
        return false;
    }

    boolean this_present_emitID = true;
    boolean that_present_emitID = true;
    if (this_present_emitID || that_present_emitID) {
      if (!(this_present_emitID && that_present_emitID))
        return false;
      if (this.emitID != that.emitID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(KeyValJSONPair other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    KeyValJSONPair typedOther = (KeyValJSONPair)other;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueJson()).compareTo(typedOther.isSetValueJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueJson, typedOther.valueJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobID()).compareTo(typedOther.isSetJobID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobID, typedOther.jobID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmitID()).compareTo(typedOther.isSetEmitID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmitID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emitID, typedOther.emitID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.key = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE_JSON
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.valueJson = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // JOB_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.jobID = iprot.readI64();
            setJobIDIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EMIT_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.emitID = iprot.readI64();
            setEmitIDIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetJobID()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobID' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetEmitID()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'emitID' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeString(this.key);
      oprot.writeFieldEnd();
    }
    if (this.valueJson != null) {
      oprot.writeFieldBegin(VALUE_JSON_FIELD_DESC);
      oprot.writeString(this.valueJson);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
    oprot.writeI64(this.jobID);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EMIT_ID_FIELD_DESC);
    oprot.writeI64(this.emitID);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KeyValJSONPair(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueJson:");
    if (this.valueJson == null) {
      sb.append("null");
    } else {
      sb.append(this.valueJson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobID:");
    sb.append(this.jobID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emitID:");
    sb.append(this.emitID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    if (valueJson == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'valueJson' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'jobID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'emitID' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

