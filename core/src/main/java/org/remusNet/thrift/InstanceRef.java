/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.remusNet.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InstanceRef implements org.apache.thrift.TBase<InstanceRef, InstanceRef._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InstanceRef");

  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PIPELINE_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.STRING, (short)3);

  public String server;
  public String pipeline;
  public String instance;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER((short)1, "server"),
    PIPELINE((short)2, "pipeline"),
    INSTANCE((short)3, "instance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER
          return SERVER;
        case 2: // PIPELINE
          return PIPELINE;
        case 3: // INSTANCE
          return INSTANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIPELINE, new org.apache.thrift.meta_data.FieldMetaData("pipeline", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InstanceRef.class, metaDataMap);
  }

  public InstanceRef() {
  }

  public InstanceRef(
    String server,
    String pipeline,
    String instance)
  {
    this();
    this.server = server;
    this.pipeline = pipeline;
    this.instance = instance;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InstanceRef(InstanceRef other) {
    if (other.isSetServer()) {
      this.server = other.server;
    }
    if (other.isSetPipeline()) {
      this.pipeline = other.pipeline;
    }
    if (other.isSetInstance()) {
      this.instance = other.instance;
    }
  }

  public InstanceRef deepCopy() {
    return new InstanceRef(this);
  }

  @Override
  public void clear() {
    this.server = null;
    this.pipeline = null;
    this.instance = null;
  }

  public String getServer() {
    return this.server;
  }

  public InstanceRef setServer(String server) {
    this.server = server;
    return this;
  }

  public void unsetServer() {
    this.server = null;
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return this.server != null;
  }

  public void setServerIsSet(boolean value) {
    if (!value) {
      this.server = null;
    }
  }

  public String getPipeline() {
    return this.pipeline;
  }

  public InstanceRef setPipeline(String pipeline) {
    this.pipeline = pipeline;
    return this;
  }

  public void unsetPipeline() {
    this.pipeline = null;
  }

  /** Returns true if field pipeline is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline() {
    return this.pipeline != null;
  }

  public void setPipelineIsSet(boolean value) {
    if (!value) {
      this.pipeline = null;
    }
  }

  public String getInstance() {
    return this.instance;
  }

  public InstanceRef setInstance(String instance) {
    this.instance = instance;
    return this;
  }

  public void unsetInstance() {
    this.instance = null;
  }

  /** Returns true if field instance is set (has been assigned a value) and false otherwise */
  public boolean isSetInstance() {
    return this.instance != null;
  }

  public void setInstanceIsSet(boolean value) {
    if (!value) {
      this.instance = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((String)value);
      }
      break;

    case PIPELINE:
      if (value == null) {
        unsetPipeline();
      } else {
        setPipeline((String)value);
      }
      break;

    case INSTANCE:
      if (value == null) {
        unsetInstance();
      } else {
        setInstance((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER:
      return getServer();

    case PIPELINE:
      return getPipeline();

    case INSTANCE:
      return getInstance();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVER:
      return isSetServer();
    case PIPELINE:
      return isSetPipeline();
    case INSTANCE:
      return isSetInstance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InstanceRef)
      return this.equals((InstanceRef)that);
    return false;
  }

  public boolean equals(InstanceRef that) {
    if (that == null)
      return false;

    boolean this_present_server = true && this.isSetServer();
    boolean that_present_server = true && that.isSetServer();
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (!this.server.equals(that.server))
        return false;
    }

    boolean this_present_pipeline = true && this.isSetPipeline();
    boolean that_present_pipeline = true && that.isSetPipeline();
    if (this_present_pipeline || that_present_pipeline) {
      if (!(this_present_pipeline && that_present_pipeline))
        return false;
      if (!this.pipeline.equals(that.pipeline))
        return false;
    }

    boolean this_present_instance = true && this.isSetInstance();
    boolean that_present_instance = true && that.isSetInstance();
    if (this_present_instance || that_present_instance) {
      if (!(this_present_instance && that_present_instance))
        return false;
      if (!this.instance.equals(that.instance))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InstanceRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InstanceRef typedOther = (InstanceRef)other;

    lastComparison = Boolean.valueOf(isSetServer()).compareTo(typedOther.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, typedOther.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPipeline()).compareTo(typedOther.isSetPipeline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline, typedOther.pipeline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstance()).compareTo(typedOther.isSetInstance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, typedOther.instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SERVER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.server = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PIPELINE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pipeline = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INSTANCE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.instance = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.server != null) {
      oprot.writeFieldBegin(SERVER_FIELD_DESC);
      oprot.writeString(this.server);
      oprot.writeFieldEnd();
    }
    if (this.pipeline != null) {
      oprot.writeFieldBegin(PIPELINE_FIELD_DESC);
      oprot.writeString(this.pipeline);
      oprot.writeFieldEnd();
    }
    if (this.instance != null) {
      oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
      oprot.writeString(this.instance);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InstanceRef(");
    boolean first = true;

    sb.append("server:");
    if (this.server == null) {
      sb.append("null");
    } else {
      sb.append(this.server);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pipeline:");
    if (this.pipeline == null) {
      sb.append("null");
    } else {
      sb.append(this.pipeline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instance:");
    if (this.instance == null) {
      sb.append("null");
    } else {
      sb.append(this.instance);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (server == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'server' was not present! Struct: " + toString());
    }
    if (pipeline == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pipeline' was not present! Struct: " + toString());
    }
    if (instance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'instance' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

