/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.remusNet.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PeerInfo implements org.apache.thrift.TBase<PeerInfo, PeerInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PeerInfo");

  private static final org.apache.thrift.protocol.TField MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("master", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField WORKER_FIELD_DESC = new org.apache.thrift.protocol.TField("worker", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("attachment", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)7);

  public boolean master;
  public boolean worker;
  public boolean database;
  public boolean attachment;
  public String name;
  public String address;
  public int port;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MASTER((short)1, "master"),
    WORKER((short)2, "worker"),
    DATABASE((short)3, "database"),
    ATTACHMENT((short)4, "attachment"),
    NAME((short)5, "name"),
    ADDRESS((short)6, "address"),
    PORT((short)7, "port");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MASTER
          return MASTER;
        case 2: // WORKER
          return WORKER;
        case 3: // DATABASE
          return DATABASE;
        case 4: // ATTACHMENT
          return ATTACHMENT;
        case 5: // NAME
          return NAME;
        case 6: // ADDRESS
          return ADDRESS;
        case 7: // PORT
          return PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MASTER_ISSET_ID = 0;
  private static final int __WORKER_ISSET_ID = 1;
  private static final int __DATABASE_ISSET_ID = 2;
  private static final int __ATTACHMENT_ISSET_ID = 3;
  private static final int __PORT_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MASTER, new org.apache.thrift.meta_data.FieldMetaData("master", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WORKER, new org.apache.thrift.meta_data.FieldMetaData("worker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ATTACHMENT, new org.apache.thrift.meta_data.FieldMetaData("attachment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PeerInfo.class, metaDataMap);
  }

  public PeerInfo() {
  }

  public PeerInfo(
    String name,
    String address,
    int port)
  {
    this();
    this.name = name;
    this.address = address;
    this.port = port;
    setPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PeerInfo(PeerInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.master = other.master;
    this.worker = other.worker;
    this.database = other.database;
    this.attachment = other.attachment;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    this.port = other.port;
  }

  public PeerInfo deepCopy() {
    return new PeerInfo(this);
  }

  @Override
  public void clear() {
    setMasterIsSet(false);
    this.master = false;
    setWorkerIsSet(false);
    this.worker = false;
    setDatabaseIsSet(false);
    this.database = false;
    setAttachmentIsSet(false);
    this.attachment = false;
    this.name = null;
    this.address = null;
    setPortIsSet(false);
    this.port = 0;
  }

  public boolean isMaster() {
    return this.master;
  }

  public PeerInfo setMaster(boolean master) {
    this.master = master;
    setMasterIsSet(true);
    return this;
  }

  public void unsetMaster() {
    __isset_bit_vector.clear(__MASTER_ISSET_ID);
  }

  /** Returns true if field master is set (has been assigned a value) and false otherwise */
  public boolean isSetMaster() {
    return __isset_bit_vector.get(__MASTER_ISSET_ID);
  }

  public void setMasterIsSet(boolean value) {
    __isset_bit_vector.set(__MASTER_ISSET_ID, value);
  }

  public boolean isWorker() {
    return this.worker;
  }

  public PeerInfo setWorker(boolean worker) {
    this.worker = worker;
    setWorkerIsSet(true);
    return this;
  }

  public void unsetWorker() {
    __isset_bit_vector.clear(__WORKER_ISSET_ID);
  }

  /** Returns true if field worker is set (has been assigned a value) and false otherwise */
  public boolean isSetWorker() {
    return __isset_bit_vector.get(__WORKER_ISSET_ID);
  }

  public void setWorkerIsSet(boolean value) {
    __isset_bit_vector.set(__WORKER_ISSET_ID, value);
  }

  public boolean isDatabase() {
    return this.database;
  }

  public PeerInfo setDatabase(boolean database) {
    this.database = database;
    setDatabaseIsSet(true);
    return this;
  }

  public void unsetDatabase() {
    __isset_bit_vector.clear(__DATABASE_ISSET_ID);
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return __isset_bit_vector.get(__DATABASE_ISSET_ID);
  }

  public void setDatabaseIsSet(boolean value) {
    __isset_bit_vector.set(__DATABASE_ISSET_ID, value);
  }

  public boolean isAttachment() {
    return this.attachment;
  }

  public PeerInfo setAttachment(boolean attachment) {
    this.attachment = attachment;
    setAttachmentIsSet(true);
    return this;
  }

  public void unsetAttachment() {
    __isset_bit_vector.clear(__ATTACHMENT_ISSET_ID);
  }

  /** Returns true if field attachment is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachment() {
    return __isset_bit_vector.get(__ATTACHMENT_ISSET_ID);
  }

  public void setAttachmentIsSet(boolean value) {
    __isset_bit_vector.set(__ATTACHMENT_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public PeerInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public PeerInfo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public PeerInfo setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bit_vector.clear(__PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return __isset_bit_vector.get(__PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bit_vector.set(__PORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MASTER:
      if (value == null) {
        unsetMaster();
      } else {
        setMaster((Boolean)value);
      }
      break;

    case WORKER:
      if (value == null) {
        unsetWorker();
      } else {
        setWorker((Boolean)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((Boolean)value);
      }
      break;

    case ATTACHMENT:
      if (value == null) {
        unsetAttachment();
      } else {
        setAttachment((Boolean)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MASTER:
      return new Boolean(isMaster());

    case WORKER:
      return new Boolean(isWorker());

    case DATABASE:
      return new Boolean(isDatabase());

    case ATTACHMENT:
      return new Boolean(isAttachment());

    case NAME:
      return getName();

    case ADDRESS:
      return getAddress();

    case PORT:
      return new Integer(getPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MASTER:
      return isSetMaster();
    case WORKER:
      return isSetWorker();
    case DATABASE:
      return isSetDatabase();
    case ATTACHMENT:
      return isSetAttachment();
    case NAME:
      return isSetName();
    case ADDRESS:
      return isSetAddress();
    case PORT:
      return isSetPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PeerInfo)
      return this.equals((PeerInfo)that);
    return false;
  }

  public boolean equals(PeerInfo that) {
    if (that == null)
      return false;

    boolean this_present_master = true && this.isSetMaster();
    boolean that_present_master = true && that.isSetMaster();
    if (this_present_master || that_present_master) {
      if (!(this_present_master && that_present_master))
        return false;
      if (this.master != that.master)
        return false;
    }

    boolean this_present_worker = true && this.isSetWorker();
    boolean that_present_worker = true && that.isSetWorker();
    if (this_present_worker || that_present_worker) {
      if (!(this_present_worker && that_present_worker))
        return false;
      if (this.worker != that.worker)
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (this.database != that.database)
        return false;
    }

    boolean this_present_attachment = true && this.isSetAttachment();
    boolean that_present_attachment = true && that.isSetAttachment();
    if (this_present_attachment || that_present_attachment) {
      if (!(this_present_attachment && that_present_attachment))
        return false;
      if (this.attachment != that.attachment)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PeerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PeerInfo typedOther = (PeerInfo)other;

    lastComparison = Boolean.valueOf(isSetMaster()).compareTo(typedOther.isSetMaster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master, typedOther.master);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorker()).compareTo(typedOther.isSetWorker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker, typedOther.worker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(typedOther.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, typedOther.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachment()).compareTo(typedOther.isSetAttachment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachment, typedOther.attachment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MASTER
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.master = iprot.readBool();
            setMasterIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // WORKER
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.worker = iprot.readBool();
            setWorkerIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DATABASE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.database = iprot.readBool();
            setDatabaseIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ATTACHMENT
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.attachment = iprot.readBool();
            setAttachmentIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ADDRESS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.address = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PORT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.port = iprot.readI32();
            setPortIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetPort()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'port' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetMaster()) {
      oprot.writeFieldBegin(MASTER_FIELD_DESC);
      oprot.writeBool(this.master);
      oprot.writeFieldEnd();
    }
    if (isSetWorker()) {
      oprot.writeFieldBegin(WORKER_FIELD_DESC);
      oprot.writeBool(this.worker);
      oprot.writeFieldEnd();
    }
    if (isSetDatabase()) {
      oprot.writeFieldBegin(DATABASE_FIELD_DESC);
      oprot.writeBool(this.database);
      oprot.writeFieldEnd();
    }
    if (isSetAttachment()) {
      oprot.writeFieldBegin(ATTACHMENT_FIELD_DESC);
      oprot.writeBool(this.attachment);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.address != null) {
      oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
      oprot.writeString(this.address);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PORT_FIELD_DESC);
    oprot.writeI32(this.port);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PeerInfo(");
    boolean first = true;

    if (isSetMaster()) {
      sb.append("master:");
      sb.append(this.master);
      first = false;
    }
    if (isSetWorker()) {
      if (!first) sb.append(", ");
      sb.append("worker:");
      sb.append(this.worker);
      first = false;
    }
    if (isSetDatabase()) {
      if (!first) sb.append(", ");
      sb.append("database:");
      sb.append(this.database);
      first = false;
    }
    if (isSetAttachment()) {
      if (!first) sb.append(", ");
      sb.append("attachment:");
      sb.append(this.attachment);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (address == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'address' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'port' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

